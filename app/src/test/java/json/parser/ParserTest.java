/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package json.parser;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.io.FileDescriptor;
import java.io.FileOutputStream;

class ParserTest {
    final ByteArrayOutputStream baosStdOut = new ByteArrayOutputStream();
    final ByteArrayOutputStream baosStdErr = new ByteArrayOutputStream();
    final String utf8 = StandardCharsets.UTF_8.name();

    @BeforeEach
    void setUp() {
        System.setSecurityManager(new NoExitSecurityManager());
        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));
        System.setErr(new PrintStream(new FileOutputStream(FileDescriptor.err)));
    }

    public void captureStdOut() {
        try {
            PrintStream ps = new PrintStream(baosStdOut, true, utf8);
            System.setOut(ps);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public void captureStdErr() {
        try {
            PrintStream ps = new PrintStream(baosStdErr, true, utf8);
            System.setErr(ps);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void ParserParsesValidEmptyObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass4.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }

        }
    }

    @Test
    public void ParserErrorsOnInvalidObject() {
        captureStdErr();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/fail34.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("1", e.getMessage());
            try {
                String data = baosStdErr.toString(utf8);
                assertEquals("Not enough tokens to process", data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidStringObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass5.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key", "value");
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidStringObject2() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass6.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key", "value");
                expected.addItem("key2", "value");
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserErrorsOnInvalidStringObject() {
        captureStdErr();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/fail35.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("1", e.getMessage());
            try {
                String data = baosStdErr.toString(utf8);
                assertEquals("Expected string key, got }", data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserErrorsOnInvalidStringObject2() {
        captureStdErr();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/fail36.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("1", e.getMessage());
            try {
                String data = baosStdErr.toString(utf8);
                assertEquals("Unable to tokenize char 'k' at position 22", data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidVariedObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass7.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key1", true);
                expected.addItem("key2", false);
                expected.addItem("key3", null);
                expected.addItem("key4", "value");
                expected.addItem("key5", 101);
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserErrorsOnInvalidVariedObject() {
        captureStdErr();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/fail37.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("1", e.getMessage());
            try {
                String data = baosStdErr.toString(utf8);
                assertEquals("Unable to tokenize char 'F' at position 28", data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidNestedObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass10.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                JSONObject nested = new JSONObject();
                nested.addItem("key2", "value");
                nested.addItem("key3", "value2");
                expected.addItem("key", nested);
                expected.addItem("key4", "value3");
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidArrayObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass8.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key", "value");
                expected.addItem("key-n", 101);
                expected.addItem("key-o", new JSONObject());
                expected.addItem("key-l", new JSONArray());
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidArrayObject2() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass9.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                JSONObject nested = new JSONObject();
                JSONArray arr = new JSONArray();
                arr.addItem("list value");
                arr.addItem(new JSONObject());
                nested.addItem("inner key", "inner value");
                expected.addItem("key", "value");
                expected.addItem("key-n", 101);
                expected.addItem("key-o", nested);
                expected.addItem("key-l", arr);
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserErrorsOnInvalidArrayObject() {
        captureStdErr();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/fail38.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("1", e.getMessage());
            try {
                String data = baosStdErr.toString(utf8);
                assertEquals("Unable to tokenize char ''' at position 97", data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserErrorsOnInvalidObjects() {
        captureStdErr();
        for (int i = 1; i < 34; i++) {
            try {
                String path = String.format("./src/test/resources/objects/fail%s.json", i);
                Parser.parse(Paths.get(path));
            } catch (IOException e) {
                e.printStackTrace();
                assertTrue(false);
            } catch (RuntimeException e) {
                String failMsg = String.format("Failed on file %s", i);
                assertEquals("1", e.getMessage(), failMsg);
            }
        }
    }

    @Test
    public void ParserParsesValidObject1() {
        captureStdOut();
        captureStdErr();
        for (int i = 1; i < 4; i++) {

        }
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass1.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            try {
                String errData = baosStdErr.toString(utf8);
                assertEquals("0", e.getMessage());
                String data = baosStdOut.toString(utf8);
                // JSONObject expected = new JSONObject();
                // JSONObject nested = new JSONObject();
                // JSONArray arr = new JSONArray();
                // arr.addItem("list value");
                // arr.addItem(new JSONObject());
                // nested.addItem("inner key", "inner value");
                // expected.addItem("key", "value");
                // expected.addItem("key-n", 101);
                // expected.addItem("key-o", nested);
                // expected.addItem("key-l", arr);
                // assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidObject2() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass2.json"));
        } catch (IOException e) {
            e.printStackTrace();
            assertTrue(false);
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);

                String expected = "[[[[[[[[[[[[[[[[[[[Not too deep]]]]]]]]]]]]]]]]]]]";
                assertEquals(expected, data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidObject3() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/objects/pass3.json"));
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baosStdOut.toString(utf8);
                JSONObject expected = new JSONObject();
                JSONObject nested = new JSONObject();
                nested.addItem("The outermost value", "must be an object or array.");
                nested.addItem("In this test", "It is an object.");
                expected.addItem("JSON Test Pattern pass3", nested);
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }
}
