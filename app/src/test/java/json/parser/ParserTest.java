/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package json.parser;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Paths;
import java.text.ParseException;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;

class ParserTest {
    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
    final String utf8 = StandardCharsets.UTF_8.name();

    @BeforeEach
    void setUp() {
        System.setSecurityManager(new NoExitSecurityManager());
    }

    public void captureStdOut() {

        try {
            PrintStream ps = new PrintStream(baos, true, utf8);
            System.setOut(ps);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

    }

    @Test
    public void ParserParsesValidEmptyObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/step1/valid.json"));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baos.toString(utf8);
                JSONObject expected = new JSONObject();
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }

        }
    }

    @Test
    public void ParserErrorsOnInvalidObject() {
        captureStdOut();
        try {
            ParseException e = assertThrows(ParseException.class,
                    () -> Parser.parse(Paths.get("./src/test/resources/step1/invalid.json")));
            assertEquals("Not enough tokens to process", e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to parse");
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void ParserParsesValidObject() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/step2/valid.json"));
            String data = baos.toString(utf8);
            assertNotNull(data);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baos.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key", "value");
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void ParserParsesValidObject2() {
        captureStdOut();
        try {
            Parser.parse(Paths.get("./src/test/resources/step2/valid2.json"));
            String data = baos.toString(utf8);
            assertNotNull(data);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (RuntimeException e) {
            assertEquals("0", e.getMessage());
            try {
                String data = baos.toString(utf8);
                JSONObject expected = new JSONObject();
                expected.addItem("key", "value");
                expected.addItem("key2", "value");
                assertEquals(expected.toString(), data.trim());
            } catch (UnsupportedEncodingException ex) {
                ex.printStackTrace();
            }
        }
    }

}
